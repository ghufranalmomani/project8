{"ast":null,"code":"import { useReducer, useRef, useEffect, useMemo, useLayoutEffect, useContext } from 'react';\nimport invariant from 'invariant';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport Subscription from '../utils/Subscription';\nimport { ReactReduxContext } from '../components/Context'; // React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\n// subscription callback always has the selector from the latest render commit\n// available, otherwise a store update may happen between render and the effect,\n// which may cause missed updates; we also must ensure the store subscription\n// is created synchronously, otherwise a store update may occur before the\n// subscription is created and an inconsistent state may be observed\n\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\n  var _useReducer = useReducer(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = useMemo(function () {\n    return new Subscription(store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = useRef();\n  var latestSelector = useRef();\n  var latestSelectedState = useRef();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(store.getState());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    var errorMessage = \"An error occured while selecting the store state: \" + err.message + \".\";\n\n    if (latestSubscriptionCallbackError.current) {\n      errorMessage += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\nOriginal stack trace:\";\n    }\n\n    throw new Error(errorMessage);\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender({});\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}\n/**\n * Hook factory, which creates a `useSelector` hook bound to a given context.\n *\n * @param {Function} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useSelector` hook bound to the specified context.\n */\n\n\nexport function createSelectorHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : function () {\n    return useContext(context);\n  };\n  return function useSelector(selector, equalityFn) {\n    if (equalityFn === void 0) {\n      equalityFn = refEquality;\n    }\n\n    invariant(selector, \"You must pass a selector to useSelectors\");\n\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store,\n        contextSub = _useReduxContext.subscription;\n\n    return useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\n  };\n}\n/**\n * A hook to access the redux store's state. This hook takes a selector function\n * as an argument. The selector is called with the store state.\n *\n * This hook takes an optional equality comparison function as the second parameter\n * that allows you to customize the way the selected state is compared to determine\n * whether the component needs to be re-rendered.\n *\n * @param {Function} selector the selector function\n * @param {Function=} equalityFn the function that will be used to determine equality\n *\n * @returns {any} the selected state\n *\n * @example\n *\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const counter = useSelector(state => state.counter)\n *   return <div>{counter}</div>\n * }\n */\n\nexport var useSelector = createSelectorHook();","map":{"version":3,"names":["useReducer","useRef","useEffect","useMemo","useLayoutEffect","useContext","invariant","useReduxContext","useDefaultReduxContext","Subscription","ReactReduxContext","useIsomorphicLayoutEffect","window","refEquality","a","b","useSelectorWithStoreAndSubscription","selector","equalityFn","store","contextSub","_useReducer","s","forceRender","subscription","latestSubscriptionCallbackError","latestSelector","latestSelectedState","selectedState","current","getState","err","errorMessage","message","stack","Error","undefined","checkForUpdates","newSelectedState","onStateChange","trySubscribe","tryUnsubscribe","createSelectorHook","context","useSelector","_useReduxContext"],"sources":["C:/xampp/htdocs/project8/node_modules/react-redux/es/hooks/useSelector.js"],"sourcesContent":["import { useReducer, useRef, useEffect, useMemo, useLayoutEffect, useContext } from 'react';\nimport invariant from 'invariant';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport Subscription from '../utils/Subscription';\nimport { ReactReduxContext } from '../components/Context'; // React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\n// subscription callback always has the selector from the latest render commit\n// available, otherwise a store update may happen between render and the effect,\n// which may cause missed updates; we also must ensure the store subscription\n// is created synchronously, otherwise a store update may occur before the\n// subscription is created and an inconsistent state may be observed\n\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\n  var _useReducer = useReducer(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = useMemo(function () {\n    return new Subscription(store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = useRef();\n  var latestSelector = useRef();\n  var latestSelectedState = useRef();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(store.getState());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    var errorMessage = \"An error occured while selecting the store state: \" + err.message + \".\";\n\n    if (latestSubscriptionCallbackError.current) {\n      errorMessage += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\nOriginal stack trace:\";\n    }\n\n    throw new Error(errorMessage);\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender({});\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}\n/**\n * Hook factory, which creates a `useSelector` hook bound to a given context.\n *\n * @param {Function} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useSelector` hook bound to the specified context.\n */\n\n\nexport function createSelectorHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : function () {\n    return useContext(context);\n  };\n  return function useSelector(selector, equalityFn) {\n    if (equalityFn === void 0) {\n      equalityFn = refEquality;\n    }\n\n    invariant(selector, \"You must pass a selector to useSelectors\");\n\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store,\n        contextSub = _useReduxContext.subscription;\n\n    return useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\n  };\n}\n/**\n * A hook to access the redux store's state. This hook takes a selector function\n * as an argument. The selector is called with the store state.\n *\n * This hook takes an optional equality comparison function as the second parameter\n * that allows you to customize the way the selected state is compared to determine\n * whether the component needs to be re-rendered.\n *\n * @param {Function} selector the selector function\n * @param {Function=} equalityFn the function that will be used to determine equality\n *\n * @returns {any} the selected state\n *\n * @example\n *\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const counter = useSelector(state => state.counter)\n *   return <div>{counter}</div>\n * }\n */\n\nexport var useSelector = createSelectorHook();"],"mappings":"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"},"metadata":{},"sourceType":"module"}